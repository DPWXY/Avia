type PostData @aws_iam @aws_api_key {
  id: ID!
  username: String
  userId: String
  title: String
  content: String
  uiImage: String
  date: AWSDate
  duration: Float
  distance: Float
  likes: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Profile @aws_iam @aws_api_key {
  id: ID!
  username: String
  userId: String
  profileImage: String
  rank: String
  hours: Int
  followers: Int
  groups: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostDataConnection @aws_api_key @aws_iam {
  items: [PostData]!
  nextToken: String
}

input ModelPostDataFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  userId: ModelStringInput
  title: ModelStringInput
  content: ModelStringInput
  uiImage: ModelStringInput
  date: ModelStringInput
  duration: ModelFloatInput
  distance: ModelFloatInput
  likes: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostDataFilterInput]
  or: [ModelPostDataFilterInput]
  not: ModelPostDataFilterInput
}

type Query {
  getPostData(id: ID!): PostData @aws_api_key @aws_iam
  listPostData(filter: ModelPostDataFilterInput, limit: Int, nextToken: String): ModelPostDataConnection @aws_api_key @aws_iam
  getProfile(id: ID!): Profile @aws_api_key @aws_iam
  listProfiles(filter: ModelProfileFilterInput, limit: Int, nextToken: String): ModelProfileConnection @aws_api_key @aws_iam
}

input ModelPostDataConditionInput {
  username: ModelStringInput
  userId: ModelStringInput
  title: ModelStringInput
  content: ModelStringInput
  uiImage: ModelStringInput
  date: ModelStringInput
  duration: ModelFloatInput
  distance: ModelFloatInput
  likes: ModelIntInput
  and: [ModelPostDataConditionInput]
  or: [ModelPostDataConditionInput]
  not: ModelPostDataConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePostDataInput {
  id: ID
  username: String
  userId: String
  title: String
  content: String
  uiImage: String
  date: AWSDate
  duration: Float
  distance: Float
  likes: Int
}

input UpdatePostDataInput {
  id: ID!
  username: String
  userId: String
  title: String
  content: String
  uiImage: String
  date: AWSDate
  duration: Float
  distance: Float
  likes: Int
}

input DeletePostDataInput {
  id: ID!
}

type Mutation {
  createPostData(input: CreatePostDataInput!, condition: ModelPostDataConditionInput): PostData @aws_api_key @aws_iam
  updatePostData(input: UpdatePostDataInput!, condition: ModelPostDataConditionInput): PostData @aws_api_key @aws_iam
  deletePostData(input: DeletePostDataInput!, condition: ModelPostDataConditionInput): PostData @aws_api_key @aws_iam
  createProfile(input: CreateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_api_key @aws_iam
  updateProfile(input: UpdateProfileInput!, condition: ModelProfileConditionInput): Profile @aws_api_key @aws_iam
  deleteProfile(input: DeleteProfileInput!, condition: ModelProfileConditionInput): Profile @aws_api_key @aws_iam
}

input ModelSubscriptionPostDataFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  userId: ModelSubscriptionStringInput
  title: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  uiImage: ModelSubscriptionStringInput
  date: ModelSubscriptionStringInput
  duration: ModelSubscriptionFloatInput
  distance: ModelSubscriptionFloatInput
  likes: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostDataFilterInput]
  or: [ModelSubscriptionPostDataFilterInput]
}

type Subscription {
  onCreatePostData(filter: ModelSubscriptionPostDataFilterInput): PostData @aws_subscribe(mutations: ["createPostData"]) @aws_api_key @aws_iam
  onUpdatePostData(filter: ModelSubscriptionPostDataFilterInput): PostData @aws_subscribe(mutations: ["updatePostData"]) @aws_api_key @aws_iam
  onDeletePostData(filter: ModelSubscriptionPostDataFilterInput): PostData @aws_subscribe(mutations: ["deletePostData"]) @aws_api_key @aws_iam
  onCreateProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_subscribe(mutations: ["createProfile"]) @aws_api_key @aws_iam
  onUpdateProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_subscribe(mutations: ["updateProfile"]) @aws_api_key @aws_iam
  onDeleteProfile(filter: ModelSubscriptionProfileFilterInput): Profile @aws_subscribe(mutations: ["deleteProfile"]) @aws_api_key @aws_iam
}

type ModelProfileConnection @aws_api_key @aws_iam {
  items: [Profile]!
  nextToken: String
}

input ModelProfileFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  userId: ModelStringInput
  profileImage: ModelStringInput
  rank: ModelStringInput
  hours: ModelIntInput
  followers: ModelIntInput
  groups: ModelIntInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelProfileFilterInput]
  or: [ModelProfileFilterInput]
  not: ModelProfileFilterInput
}

input ModelProfileConditionInput {
  username: ModelStringInput
  userId: ModelStringInput
  profileImage: ModelStringInput
  rank: ModelStringInput
  hours: ModelIntInput
  followers: ModelIntInput
  groups: ModelIntInput
  and: [ModelProfileConditionInput]
  or: [ModelProfileConditionInput]
  not: ModelProfileConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateProfileInput {
  id: ID
  username: String
  userId: String
  profileImage: String
  rank: String
  hours: Int
  followers: Int
  groups: Int
}

input UpdateProfileInput {
  id: ID!
  username: String
  userId: String
  profileImage: String
  rank: String
  hours: Int
  followers: Int
  groups: Int
}

input DeleteProfileInput {
  id: ID!
}

input ModelSubscriptionProfileFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  userId: ModelSubscriptionStringInput
  profileImage: ModelSubscriptionStringInput
  rank: ModelSubscriptionStringInput
  hours: ModelSubscriptionIntInput
  followers: ModelSubscriptionIntInput
  groups: ModelSubscriptionIntInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionProfileFilterInput]
  or: [ModelSubscriptionProfileFilterInput]
}
