import fsp from 'fs/promises';
import path from 'path';
import z from 'zod';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * NpmLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class NpmLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const dependencies = [];
        const packageLockJsonPath = path.resolve(process.cwd(), 'package-lock.json');
        let packageLockJson;
        try {
            const jsonLockContents = await fsp.readFile(packageLockJsonPath, 'utf-8');
            const jsonLockParsedValue = JSON.parse(jsonLockContents);
            // This will strip fields that are not part of the package lock schema
            packageLockJson = packageLockJsonSchema.parse(jsonLockParsedValue);
        }
        catch {
            printer.log(`Failed to get lock file contents because ${packageLockJsonPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        for (const key in packageLockJson.packages) {
            if (key === '') {
                // Skip root project in packages
                continue;
            }
            const dependencyVersion = packageLockJson.packages[key].version;
            // Version may not exist if package is a symbolic link
            if (dependencyVersion) {
                // Remove "node_modules/" prefix
                const dependencyName = key.replace(/^node_modules\//, '');
                dependencies.push({
                    name: dependencyName,
                    version: dependencyVersion,
                });
            }
        }
        return { dependencies };
    };
}
const packageLockJsonSchema = z.object({
    packages: z
        .record(z.string(), z.object({
        version: z.string().optional(),
    }))
        .optional(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtX2xvY2tfZmlsZV9yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIvbG9jay1maWxlLXJlYWRlci9ucG1fbG9ja19maWxlX3JlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUM7QUFDOUIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQztBQUVwQixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QiwwQkFBMEIsR0FBRyxLQUFLLElBRWhDLEVBQUU7UUFDRixNQUFNLFlBQVksR0FBc0IsRUFBRSxDQUFDO1FBQzNDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDdEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNiLG1CQUFtQixDQUNwQixDQUFDO1FBQ0YsSUFBSSxlQUFlLENBQUM7UUFDcEIsSUFBSTtZQUNGLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3pELHNFQUFzRTtZQUN0RSxlQUFlLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDcEU7UUFBQyxNQUFNO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FDVCw0Q0FBNEMsbUJBQW1CLHNDQUFzQyxFQUNyRyxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxRQUFRLEVBQUU7WUFDMUMsSUFBSSxHQUFHLEtBQUssRUFBRSxFQUFFO2dCQUNkLGdDQUFnQztnQkFDaEMsU0FBUzthQUNWO1lBQ0QsTUFBTSxpQkFBaUIsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUVoRSxzREFBc0Q7WUFDdEQsSUFBSSxpQkFBaUIsRUFBRTtnQkFDckIsZ0NBQWdDO2dCQUNoQyxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMxRCxZQUFZLENBQUMsSUFBSSxDQUFDO29CQUNoQixJQUFJLEVBQUUsY0FBYztvQkFDcEIsT0FBTyxFQUFFLGlCQUFpQjtpQkFDM0IsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtRQUVELE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNyQyxRQUFRLEVBQUUsQ0FBQztTQUNSLE1BQU0sQ0FDTCxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQ1YsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNQLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0tBQy9CLENBQUMsQ0FDSDtTQUNBLFFBQVEsRUFBRTtDQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlcGVuZGVuY3kgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeiBmcm9tICd6b2QnO1xuaW1wb3J0IHsgTG9ja0ZpbGVDb250ZW50cywgTG9ja0ZpbGVSZWFkZXIgfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IHByaW50ZXIgfSBmcm9tICcuLi8uLi9wcmludGVyLmpzJztcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSAnLi4vLi4vcHJpbnRlci9wcmludGVyLmpzJztcblxuLyoqXG4gKiBOcG1Mb2NrRmlsZVJlYWRlciBpcyBhbiBhYnN0cmFjdGlvbiBhcm91bmQgdGhlIGxvZ2ljIHVzZWQgdG8gcmVhZCBhbmQgcGFyc2UgbG9jayBmaWxlIGNvbnRlbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBOcG1Mb2NrRmlsZVJlYWRlciBpbXBsZW1lbnRzIExvY2tGaWxlUmVhZGVyIHtcbiAgZ2V0TG9ja0ZpbGVDb250ZW50c0Zyb21Dd2QgPSBhc3luYyAoKTogUHJvbWlzZTxcbiAgICBMb2NrRmlsZUNvbnRlbnRzIHwgdW5kZWZpbmVkXG4gID4gPT4ge1xuICAgIGNvbnN0IGRlcGVuZGVuY2llczogQXJyYXk8RGVwZW5kZW5jeT4gPSBbXTtcbiAgICBjb25zdCBwYWNrYWdlTG9ja0pzb25QYXRoID0gcGF0aC5yZXNvbHZlKFxuICAgICAgcHJvY2Vzcy5jd2QoKSxcbiAgICAgICdwYWNrYWdlLWxvY2suanNvbidcbiAgICApO1xuICAgIGxldCBwYWNrYWdlTG9ja0pzb247XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGpzb25Mb2NrQ29udGVudHMgPSBhd2FpdCBmc3AucmVhZEZpbGUocGFja2FnZUxvY2tKc29uUGF0aCwgJ3V0Zi04Jyk7XG4gICAgICBjb25zdCBqc29uTG9ja1BhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShqc29uTG9ja0NvbnRlbnRzKTtcbiAgICAgIC8vIFRoaXMgd2lsbCBzdHJpcCBmaWVsZHMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHBhY2thZ2UgbG9jayBzY2hlbWFcbiAgICAgIHBhY2thZ2VMb2NrSnNvbiA9IHBhY2thZ2VMb2NrSnNvblNjaGVtYS5wYXJzZShqc29uTG9ja1BhcnNlZFZhbHVlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHByaW50ZXIubG9nKFxuICAgICAgICBgRmFpbGVkIHRvIGdldCBsb2NrIGZpbGUgY29udGVudHMgYmVjYXVzZSAke3BhY2thZ2VMb2NrSnNvblBhdGh9IGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBwYXJzZS1hYmxlYCxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUdcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFja2FnZUxvY2tKc29uLnBhY2thZ2VzKSB7XG4gICAgICBpZiAoa2V5ID09PSAnJykge1xuICAgICAgICAvLyBTa2lwIHJvb3QgcHJvamVjdCBpbiBwYWNrYWdlc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRlcGVuZGVuY3lWZXJzaW9uID0gcGFja2FnZUxvY2tKc29uLnBhY2thZ2VzW2tleV0udmVyc2lvbjtcblxuICAgICAgLy8gVmVyc2lvbiBtYXkgbm90IGV4aXN0IGlmIHBhY2thZ2UgaXMgYSBzeW1ib2xpYyBsaW5rXG4gICAgICBpZiAoZGVwZW5kZW5jeVZlcnNpb24pIHtcbiAgICAgICAgLy8gUmVtb3ZlIFwibm9kZV9tb2R1bGVzL1wiIHByZWZpeFxuICAgICAgICBjb25zdCBkZXBlbmRlbmN5TmFtZSA9IGtleS5yZXBsYWNlKC9ebm9kZV9tb2R1bGVzXFwvLywgJycpO1xuICAgICAgICBkZXBlbmRlbmNpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZTogZGVwZW5kZW5jeU5hbWUsXG4gICAgICAgICAgdmVyc2lvbjogZGVwZW5kZW5jeVZlcnNpb24sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGRlcGVuZGVuY2llcyB9O1xuICB9O1xufVxuXG5jb25zdCBwYWNrYWdlTG9ja0pzb25TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHBhY2thZ2VzOiB6XG4gICAgLnJlY29yZChcbiAgICAgIHouc3RyaW5nKCksXG4gICAgICB6Lm9iamVjdCh7XG4gICAgICAgIHZlcnNpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIH0pXG4gICAgKVxuICAgIC5vcHRpb25hbCgpLFxufSk7XG4iXX0=