import fsp from 'fs/promises';
import path from 'path';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * PnpmLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class PnpmLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const eolRegex = '[\r\n]';
        const dependencies = [];
        const pnpmLockPath = path.resolve(process.cwd(), 'pnpm-lock.yaml');
        try {
            const pnpmLockContents = await fsp.readFile(pnpmLockPath, 'utf-8');
            const pnpmLockContentsArray = pnpmLockContents.split(new RegExp(`${eolRegex}${eolRegex}`));
            const startOfPackagesIndex = pnpmLockContentsArray.indexOf('packages:');
            if (startOfPackagesIndex === -1) {
                return { dependencies };
            }
            const pnpmLockPackages = pnpmLockContentsArray.slice(startOfPackagesIndex + 1);
            for (const pnpmDependencyBlock of pnpmLockPackages) {
                // Get line that contains dependency name and version and remove quotes and colon
                const pnpmDependencyLine = pnpmDependencyBlock
                    .trim()
                    .split(new RegExp(eolRegex))[0]
                    .replaceAll(/[':]/g, '');
                const dependencyName = pnpmDependencyLine.slice(0, pnpmDependencyLine.lastIndexOf('@'));
                const dependencyVersion = pnpmDependencyLine.slice(pnpmDependencyLine.lastIndexOf('@') + 1);
                dependencies.push({ name: dependencyName, version: dependencyVersion });
            }
        }
        catch {
            printer.log(`Failed to get lock file contents because ${pnpmLockPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        return { dependencies };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5wbV9sb2NrX2ZpbGVfcmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhY2thZ2UtbWFuYWdlci1jb250cm9sbGVyL2xvY2stZmlsZS1yZWFkZXIvcG5wbV9sb2NrX2ZpbGVfcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsMEJBQTBCLEdBQUcsS0FBSyxJQUVoQyxFQUFFO1FBQ0YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQzFCLE1BQU0sWUFBWSxHQUFzQixFQUFFLENBQUM7UUFDM0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVuRSxJQUFJO1lBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ25FLE1BQU0scUJBQXFCLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUNsRCxJQUFJLE1BQU0sQ0FBQyxHQUFHLFFBQVEsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUNyQyxDQUFDO1lBRUYsTUFBTSxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDeEUsSUFBSSxvQkFBb0IsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO2FBQ3pCO1lBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQ2xELG9CQUFvQixHQUFHLENBQUMsQ0FDekIsQ0FBQztZQUVGLEtBQUssTUFBTSxtQkFBbUIsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDbEQsaUZBQWlGO2dCQUNqRixNQUFNLGtCQUFrQixHQUFHLG1CQUFtQjtxQkFDM0MsSUFBSSxFQUFFO3FCQUNOLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDOUIsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0IsTUFBTSxjQUFjLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUM3QyxDQUFDLEVBQ0Qsa0JBQWtCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUNwQyxDQUFDO2dCQUNGLE1BQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUNoRCxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUN4QyxDQUFDO2dCQUVGLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7YUFDekU7U0FDRjtRQUFDLE1BQU07WUFDTixPQUFPLENBQUMsR0FBRyxDQUNULDRDQUE0QyxZQUFZLHNDQUFzQyxFQUM5RixRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFFRCxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZXBlbmRlbmN5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgZnNwIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgTG9ja0ZpbGVDb250ZW50cywgTG9ja0ZpbGVSZWFkZXIgfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IHByaW50ZXIgfSBmcm9tICcuLi8uLi9wcmludGVyLmpzJztcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSAnLi4vLi4vcHJpbnRlci9wcmludGVyLmpzJztcblxuLyoqXG4gKiBQbnBtTG9ja0ZpbGVSZWFkZXIgaXMgYW4gYWJzdHJhY3Rpb24gYXJvdW5kIHRoZSBsb2dpYyB1c2VkIHRvIHJlYWQgYW5kIHBhcnNlIGxvY2sgZmlsZSBjb250ZW50c1xuICovXG5leHBvcnQgY2xhc3MgUG5wbUxvY2tGaWxlUmVhZGVyIGltcGxlbWVudHMgTG9ja0ZpbGVSZWFkZXIge1xuICBnZXRMb2NrRmlsZUNvbnRlbnRzRnJvbUN3ZCA9IGFzeW5jICgpOiBQcm9taXNlPFxuICAgIExvY2tGaWxlQ29udGVudHMgfCB1bmRlZmluZWRcbiAgPiA9PiB7XG4gICAgY29uc3QgZW9sUmVnZXggPSAnW1xcclxcbl0nO1xuICAgIGNvbnN0IGRlcGVuZGVuY2llczogQXJyYXk8RGVwZW5kZW5jeT4gPSBbXTtcbiAgICBjb25zdCBwbnBtTG9ja1BhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ3BucG0tbG9jay55YW1sJyk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcG5wbUxvY2tDb250ZW50cyA9IGF3YWl0IGZzcC5yZWFkRmlsZShwbnBtTG9ja1BhdGgsICd1dGYtOCcpO1xuICAgICAgY29uc3QgcG5wbUxvY2tDb250ZW50c0FycmF5ID0gcG5wbUxvY2tDb250ZW50cy5zcGxpdChcbiAgICAgICAgbmV3IFJlZ0V4cChgJHtlb2xSZWdleH0ke2VvbFJlZ2V4fWApXG4gICAgICApO1xuXG4gICAgICBjb25zdCBzdGFydE9mUGFja2FnZXNJbmRleCA9IHBucG1Mb2NrQ29udGVudHNBcnJheS5pbmRleE9mKCdwYWNrYWdlczonKTtcbiAgICAgIGlmIChzdGFydE9mUGFja2FnZXNJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHsgZGVwZW5kZW5jaWVzIH07XG4gICAgICB9XG4gICAgICBjb25zdCBwbnBtTG9ja1BhY2thZ2VzID0gcG5wbUxvY2tDb250ZW50c0FycmF5LnNsaWNlKFxuICAgICAgICBzdGFydE9mUGFja2FnZXNJbmRleCArIDFcbiAgICAgICk7XG5cbiAgICAgIGZvciAoY29uc3QgcG5wbURlcGVuZGVuY3lCbG9jayBvZiBwbnBtTG9ja1BhY2thZ2VzKSB7XG4gICAgICAgIC8vIEdldCBsaW5lIHRoYXQgY29udGFpbnMgZGVwZW5kZW5jeSBuYW1lIGFuZCB2ZXJzaW9uIGFuZCByZW1vdmUgcXVvdGVzIGFuZCBjb2xvblxuICAgICAgICBjb25zdCBwbnBtRGVwZW5kZW5jeUxpbmUgPSBwbnBtRGVwZW5kZW5jeUJsb2NrXG4gICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgIC5zcGxpdChuZXcgUmVnRXhwKGVvbFJlZ2V4KSlbMF1cbiAgICAgICAgICAucmVwbGFjZUFsbCgvWyc6XS9nLCAnJyk7XG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lID0gcG5wbURlcGVuZGVuY3lMaW5lLnNsaWNlKFxuICAgICAgICAgIDAsXG4gICAgICAgICAgcG5wbURlcGVuZGVuY3lMaW5lLmxhc3RJbmRleE9mKCdAJylcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZGVwZW5kZW5jeVZlcnNpb24gPSBwbnBtRGVwZW5kZW5jeUxpbmUuc2xpY2UoXG4gICAgICAgICAgcG5wbURlcGVuZGVuY3lMaW5lLmxhc3RJbmRleE9mKCdAJykgKyAxXG4gICAgICAgICk7XG5cbiAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goeyBuYW1lOiBkZXBlbmRlbmN5TmFtZSwgdmVyc2lvbjogZGVwZW5kZW5jeVZlcnNpb24gfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCB7XG4gICAgICBwcmludGVyLmxvZyhcbiAgICAgICAgYEZhaWxlZCB0byBnZXQgbG9jayBmaWxlIGNvbnRlbnRzIGJlY2F1c2UgJHtwbnBtTG9ja1BhdGh9IGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBwYXJzZS1hYmxlYCxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUdcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZGVwZW5kZW5jaWVzIH07XG4gIH07XG59XG4iXX0=