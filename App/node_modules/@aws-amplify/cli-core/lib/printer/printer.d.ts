/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { WriteStream } from 'node:tty';
export type RecordValue = string | number | string[] | Date;
/**
 * The class that pretty prints to the output stream.
 */
export declare class Printer {
    private readonly minimumLogLevel;
    private readonly stdout;
    private readonly stderr;
    private readonly refreshRate;
    private readonly enableTTY;
    private currentSpinners;
    /**
     * Sets default configs
     */
    constructor(minimumLogLevel: LogLevel, stdout?: WriteStream | NodeJS.WritableStream, stderr?: WriteStream | NodeJS.WritableStream, refreshRate?: number, enableTTY?: boolean);
    /**
     * Prints a given message to output stream followed by a newline.
     */
    print: (message: string) => void;
    /**
     * Prints a new line to output stream
     */
    printNewLine: () => void;
    /**
     * Logs a message to the output stream at the given log level followed by a newline
     */
    log: (message: string, level?: LogLevel) => void;
    /**
     * Logs a message with animated spinner
     * If stdout is not a TTY, the message is logged at the info level without a spinner
     */
    indicateProgress: (message: string, callback: () => Promise<void>, successMessage?: string) => Promise<void>;
    /**
     * Start a spinner for the given message.
     * If stdout is not a TTY, the message is logged at the info level without a spinner
     * @returns the id of the spinner
     */
    startSpinner: (id: string, message: string, options?: {
        timeoutSeconds: number;
    }) => string;
    isSpinnerRunning: (id: string) => boolean;
    /**
     * Stop a spinner for the given id.
     */
    stopSpinner: (id: string) => void;
    /**
     * Update the spinner options for a given id, e.g. message or prefixText
     */
    updateSpinner: (id: string, options: {
        message?: string;
        prefixText?: string;
    }) => void;
}
export declare enum LogLevel {
    ERROR = 0,
    INFO = 1,
    DEBUG = 2
}
//# sourceMappingURL=printer.d.ts.map