import { EOL } from 'os';
import ora, { oraPromise } from 'ora';
/**
 * The class that pretty prints to the output stream.
 */
export class Printer {
    minimumLogLevel;
    stdout;
    stderr;
    refreshRate;
    enableTTY;
    currentSpinners = {};
    /**
     * Sets default configs
     */
    constructor(minimumLogLevel, stdout = process.stdout, stderr = process.stderr, refreshRate = 500, enableTTY = process.env.CI ? false : true) {
        this.minimumLogLevel = minimumLogLevel;
        this.stdout = stdout;
        this.stderr = stderr;
        this.refreshRate = refreshRate;
        this.enableTTY = enableTTY;
    }
    /**
     * Prints a given message to output stream followed by a newline.
     */
    print = (message) => {
        this.stdout.write(message);
        this.printNewLine();
    };
    /**
     * Prints a new line to output stream
     */
    printNewLine = () => {
        this.stdout.write(EOL);
    };
    /**
     * Logs a message to the output stream at the given log level followed by a newline
     */
    log = (message, level = LogLevel.INFO) => {
        const doLogMessage = level <= this.minimumLogLevel;
        if (!doLogMessage) {
            return;
        }
        const logMessage = this.minimumLogLevel === LogLevel.DEBUG
            ? `[${LogLevel[level]}] ${new Date().toISOString()}: ${message}`
            : message;
        if (level === LogLevel.ERROR) {
            this.stderr.write(logMessage);
        }
        else {
            this.stdout.write(logMessage);
        }
        this.printNewLine();
    };
    /**
     * Logs a message with animated spinner
     * If stdout is not a TTY, the message is logged at the info level without a spinner
     */
    indicateProgress = async (message, callback, successMessage) => {
        await oraPromise(callback, {
            text: message,
            color: 'white',
            stream: this.stdout,
            discardStdin: false,
            hideCursor: false,
            interval: this.refreshRate,
            spinner: 'dots',
            successText: successMessage,
            isEnabled: this.enableTTY,
        });
    };
    /**
     * Start a spinner for the given message.
     * If stdout is not a TTY, the message is logged at the info level without a spinner
     * @returns the id of the spinner
     */
    startSpinner = (id, message, options = { timeoutSeconds: 60 }) => {
        this.currentSpinners[id] = {
            instance: ora({
                text: message,
                color: 'white',
                stream: this.stdout,
                spinner: 'dots',
                interval: this.refreshRate,
                discardStdin: false,
                hideCursor: false,
                isEnabled: this.enableTTY,
            }).start(),
            timeout: setTimeout(() => {
                this.stopSpinner(id);
            }, options.timeoutSeconds * 1000),
        };
        return id;
    };
    isSpinnerRunning = (id) => {
        return this.currentSpinners[id] !== undefined;
    };
    /**
     * Stop a spinner for the given id.
     */
    stopSpinner = (id) => {
        if (this.currentSpinners[id] === undefined)
            return;
        this.currentSpinners[id].instance.stop();
        clearTimeout(this.currentSpinners[id].timeout);
        delete this.currentSpinners[id];
    };
    /**
     * Update the spinner options for a given id, e.g. message or prefixText
     */
    updateSpinner = (id, options) => {
        if (this.currentSpinners[id] === undefined) {
            this.log(`Spinner with id ${id} not found or already stopped`, LogLevel.ERROR);
            return;
        }
        if (options.prefixText) {
            this.currentSpinners[id].instance.prefixText = options.prefixText;
        }
        else if (options.message) {
            this.currentSpinners[id].instance.text = options.message;
        }
        // Refresh the timer
        this.currentSpinners[id].timeout.refresh();
    };
}
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 2] = "DEBUG";
})(LogLevel || (LogLevel = {}));
//# sourceMappingURL=data:application/json;base64,