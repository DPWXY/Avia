import { EOL } from 'os';
import envinfo from 'envinfo';
import { format } from '@aws-amplify/cli-core';
/**
 * Provides environment information.
 */
export class EnvironmentInfoProvider {
    /**
     * Get environment information
     */
    async getEnvInfo() {
        const info = await envinfo.run({
            System: ['OS', 'CPU', 'Memory', 'Shell'],
            Binaries: ['Node', 'Yarn', 'npm', 'pnpm'],
            npmPackages: [
                '@aws-amplify/ai-constructs',
                '@aws-amplify/auth-construct',
                '@aws-amplify/backend',
                '@aws-amplify/backend-ai',
                '@aws-amplify/backend-auth',
                '@aws-amplify/backend-cli',
                '@aws-amplify/backend-data',
                '@aws-amplify/backend-deployer',
                '@aws-amplify/backend-function',
                '@aws-amplify/backend-output-schemas',
                '@aws-amplify/backend-output-storage',
                '@aws-amplify/backend-secret',
                '@aws-amplify/backend-storage',
                '@aws-amplify/cli-core',
                '@aws-amplify/client-config',
                '@aws-amplify/data-construct',
                '@aws-amplify/data-schema',
                '@aws-amplify/deployed-backend-client',
                '@aws-amplify/form-generator',
                '@aws-amplify/model-generator',
                '@aws-amplify/platform-core',
                '@aws-amplify/plugin-types',
                '@aws-amplify/sandbox',
                '@aws-amplify/schema-generator',
                'typescript',
                'aws-cdk',
                'aws-cdk-lib',
                'aws-amplify',
            ],
        }, { json: true, showNotFound: true, fullTree: true });
        return this.formatEnvInfo(JSON.parse(info));
    }
    /**
     * Format environment information.
     * @param info - The environment information.
     * @returns The formatted environment information.
     */
    formatEnvInfo(info) {
        const system = [
            'System:',
            ...Object.entries(info.System).map(([part, details]) => {
                if (typeof details !== 'string') {
                    return format.indent(`${part}: ${details.path}`);
                }
                return format.indent(`${part}: ${details}`);
            }),
        ];
        const binaries = [
            'Binaries:',
            ...Object.entries(info.Binaries).map(([name, binary]) => {
                return format.indent(`${name}: ${binary.version} - ${binary.path}`);
            }),
        ];
        const npmPackages = [
            'NPM Packages:',
            ...Object.entries(info.npmPackages).map(([name, details]) => {
                // envinfo with fullTree: true returns the version of the project package.json under %name% which we don't care about
                if (name === '%name%') {
                    return;
                }
                if (typeof details === 'string') {
                    return format.indent(`${name}: ${details}`);
                }
                else if (Object.keys(details).length === 0) {
                    // if package details are empty, exclude it from the output. Note that this is different than the package not being installed
                    // the potential for empty details seems to be a side-effect of fullTree: true on envinfo
                    return;
                }
                return format.indent(`${name}: ${details.installed}`);
            }),
        ];
        const output = [system, binaries, npmPackages]
            .flat()
            .filter((line) => !!line)
            .join(EOL);
        return output;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52X2luZm9fcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5mby9lbnZfaW5mb19wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3pCLE9BQU8sT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHL0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDZCxNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQzVCO1lBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDO1lBQ3hDLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQztZQUN6QyxXQUFXLEVBQUU7Z0JBQ1gsNEJBQTRCO2dCQUM1Qiw2QkFBNkI7Z0JBQzdCLHNCQUFzQjtnQkFDdEIseUJBQXlCO2dCQUN6QiwyQkFBMkI7Z0JBQzNCLDBCQUEwQjtnQkFDMUIsMkJBQTJCO2dCQUMzQiwrQkFBK0I7Z0JBQy9CLCtCQUErQjtnQkFDL0IscUNBQXFDO2dCQUNyQyxxQ0FBcUM7Z0JBQ3JDLDZCQUE2QjtnQkFDN0IsOEJBQThCO2dCQUM5Qix1QkFBdUI7Z0JBQ3ZCLDRCQUE0QjtnQkFDNUIsNkJBQTZCO2dCQUM3QiwwQkFBMEI7Z0JBQzFCLHNDQUFzQztnQkFDdEMsNkJBQTZCO2dCQUM3Qiw4QkFBOEI7Z0JBQzlCLDRCQUE0QjtnQkFDNUIsMkJBQTJCO2dCQUMzQixzQkFBc0I7Z0JBQ3RCLCtCQUErQjtnQkFDL0IsWUFBWTtnQkFDWixTQUFTO2dCQUNULGFBQWE7Z0JBQ2IsYUFBYTthQUNkO1NBQ0YsRUFDRCxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQ25ELENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssYUFBYSxDQUFDLElBQWE7UUFDakMsTUFBTSxNQUFNLEdBQUc7WUFDYixTQUFTO1lBQ1QsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO2dCQUNyRCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtvQkFDL0IsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2lCQUNsRDtnQkFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEtBQUssT0FBTyxFQUFFLENBQUMsQ0FBQztZQUM5QyxDQUFDLENBQUM7U0FDSCxDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUc7WUFDZixXQUFXO1lBQ1gsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO2dCQUN0RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLEtBQUssTUFBTSxDQUFDLE9BQU8sTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN0RSxDQUFDLENBQUM7U0FDSCxDQUFDO1FBQ0YsTUFBTSxXQUFXLEdBQUc7WUFDbEIsZUFBZTtZQUNmLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRTtnQkFDMUQscUhBQXFIO2dCQUNySCxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7b0JBQ3JCLE9BQU87aUJBQ1I7Z0JBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7b0JBQy9CLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2lCQUM3QztxQkFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDNUMsNkhBQTZIO29CQUM3SCx5RkFBeUY7b0JBQ3pGLE9BQU87aUJBQ1I7Z0JBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxLQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQztTQUNILENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDO2FBQzNDLElBQUksRUFBRTthQUNOLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5pbXBvcnQgZW52aW5mbyBmcm9tICdlbnZpbmZvJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBFbnZJbmZvIH0gZnJvbSAnLi9lbnZfaW5mb19wcm92aWRlcl90eXBlcy5qcyc7XG5cbi8qKlxuICogUHJvdmlkZXMgZW52aXJvbm1lbnQgaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnZpcm9ubWVudEluZm9Qcm92aWRlciB7XG4gIC8qKlxuICAgKiBHZXQgZW52aXJvbm1lbnQgaW5mb3JtYXRpb25cbiAgICovXG4gIGFzeW5jIGdldEVudkluZm8oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBpbmZvID0gYXdhaXQgZW52aW5mby5ydW4oXG4gICAgICB7XG4gICAgICAgIFN5c3RlbTogWydPUycsICdDUFUnLCAnTWVtb3J5JywgJ1NoZWxsJ10sXG4gICAgICAgIEJpbmFyaWVzOiBbJ05vZGUnLCAnWWFybicsICducG0nLCAncG5wbSddLFxuICAgICAgICBucG1QYWNrYWdlczogW1xuICAgICAgICAgICdAYXdzLWFtcGxpZnkvYWktY29uc3RydWN0cycsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9hdXRoLWNvbnN0cnVjdCcsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtYWknLFxuICAgICAgICAgICdAYXdzLWFtcGxpZnkvYmFja2VuZC1hdXRoJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtY2xpJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGF0YScsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZnVuY3Rpb24nLFxuICAgICAgICAgICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcycsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zdG9yYWdlJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc3RvcmFnZScsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9jbGktY29yZScsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9jbGllbnQtY29uZmlnJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2RhdGEtY29uc3RydWN0JyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2RhdGEtc2NoZW1hJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L2Zvcm0tZ2VuZXJhdG9yJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L21vZGVsLWdlbmVyYXRvcicsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcycsXG4gICAgICAgICAgJ0Bhd3MtYW1wbGlmeS9zYW5kYm94JyxcbiAgICAgICAgICAnQGF3cy1hbXBsaWZ5L3NjaGVtYS1nZW5lcmF0b3InLFxuICAgICAgICAgICd0eXBlc2NyaXB0JyxcbiAgICAgICAgICAnYXdzLWNkaycsXG4gICAgICAgICAgJ2F3cy1jZGstbGliJyxcbiAgICAgICAgICAnYXdzLWFtcGxpZnknLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHsganNvbjogdHJ1ZSwgc2hvd05vdEZvdW5kOiB0cnVlLCBmdWxsVHJlZTogdHJ1ZSB9XG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXRFbnZJbmZvKEpTT04ucGFyc2UoaW5mbykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCBlbnZpcm9ubWVudCBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIGluZm8gLSBUaGUgZW52aXJvbm1lbnQgaW5mb3JtYXRpb24uXG4gICAqIEByZXR1cm5zIFRoZSBmb3JtYXR0ZWQgZW52aXJvbm1lbnQgaW5mb3JtYXRpb24uXG4gICAqL1xuICBwcml2YXRlIGZvcm1hdEVudkluZm8oaW5mbzogRW52SW5mbyk6IHN0cmluZyB7XG4gICAgY29uc3Qgc3lzdGVtID0gW1xuICAgICAgJ1N5c3RlbTonLFxuICAgICAgLi4uT2JqZWN0LmVudHJpZXMoaW5mby5TeXN0ZW0pLm1hcCgoW3BhcnQsIGRldGFpbHNdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZGV0YWlscyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0LmluZGVudChgJHtwYXJ0fTogJHtkZXRhaWxzLnBhdGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdC5pbmRlbnQoYCR7cGFydH06ICR7ZGV0YWlsc31gKTtcbiAgICAgIH0pLFxuICAgIF07XG4gICAgY29uc3QgYmluYXJpZXMgPSBbXG4gICAgICAnQmluYXJpZXM6JyxcbiAgICAgIC4uLk9iamVjdC5lbnRyaWVzKGluZm8uQmluYXJpZXMpLm1hcCgoW25hbWUsIGJpbmFyeV0pID0+IHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdC5pbmRlbnQoYCR7bmFtZX06ICR7YmluYXJ5LnZlcnNpb259IC0gJHtiaW5hcnkucGF0aH1gKTtcbiAgICAgIH0pLFxuICAgIF07XG4gICAgY29uc3QgbnBtUGFja2FnZXMgPSBbXG4gICAgICAnTlBNIFBhY2thZ2VzOicsXG4gICAgICAuLi5PYmplY3QuZW50cmllcyhpbmZvLm5wbVBhY2thZ2VzKS5tYXAoKFtuYW1lLCBkZXRhaWxzXSkgPT4ge1xuICAgICAgICAvLyBlbnZpbmZvIHdpdGggZnVsbFRyZWU6IHRydWUgcmV0dXJucyB0aGUgdmVyc2lvbiBvZiB0aGUgcHJvamVjdCBwYWNrYWdlLmpzb24gdW5kZXIgJW5hbWUlIHdoaWNoIHdlIGRvbid0IGNhcmUgYWJvdXRcbiAgICAgICAgaWYgKG5hbWUgPT09ICclbmFtZSUnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZGV0YWlscyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0LmluZGVudChgJHtuYW1lfTogJHtkZXRhaWxzfWApO1xuICAgICAgICB9IGVsc2UgaWYgKE9iamVjdC5rZXlzKGRldGFpbHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIC8vIGlmIHBhY2thZ2UgZGV0YWlscyBhcmUgZW1wdHksIGV4Y2x1ZGUgaXQgZnJvbSB0aGUgb3V0cHV0LiBOb3RlIHRoYXQgdGhpcyBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgcGFja2FnZSBub3QgYmVpbmcgaW5zdGFsbGVkXG4gICAgICAgICAgLy8gdGhlIHBvdGVudGlhbCBmb3IgZW1wdHkgZGV0YWlscyBzZWVtcyB0byBiZSBhIHNpZGUtZWZmZWN0IG9mIGZ1bGxUcmVlOiB0cnVlIG9uIGVudmluZm9cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdC5pbmRlbnQoYCR7bmFtZX06ICR7ZGV0YWlscy5pbnN0YWxsZWR9YCk7XG4gICAgICB9KSxcbiAgICBdO1xuXG4gICAgY29uc3Qgb3V0cHV0ID0gW3N5c3RlbSwgYmluYXJpZXMsIG5wbVBhY2thZ2VzXVxuICAgICAgLmZsYXQoKVxuICAgICAgLmZpbHRlcigobGluZSkgPT4gISFsaW5lKVxuICAgICAgLmpvaW4oRU9MKTtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG59XG4iXX0=