import _fsp from 'fs/promises';
import path from 'path';
import { ClientConfigFormat, } from '../client-config-types/client_config.js';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * A class that persists client config to disk.
 */
export class ClientConfigWriter {
    pathResolver;
    nameResolver;
    formatter;
    fsp;
    /**
     * Creates client config writer
     */
    constructor(pathResolver, nameResolver, formatter, fsp = _fsp) {
        this.pathResolver = pathResolver;
        this.nameResolver = nameResolver;
        this.formatter = formatter;
        this.fsp = fsp;
    }
    /**
     * Persists provided client config as json file to target path.
     */
    writeClientConfig = async (clientConfig, version, outDir, format = ClientConfigFormat.JSON) => {
        const targetPath = await this.pathResolver(this.nameResolver(version), outDir, format);
        const fileContent = this.formatter.format(clientConfig, format);
        try {
            await this.fsp.writeFile(targetPath, fileContent);
        }
        catch (err) {
            const error = err;
            if (error.message.includes('EACCES')) {
                throw new AmplifyUserError('PermissionsError', {
                    message: `You do not have the permissions to write to this file: ${targetPath}`,
                    resolution: `Ensure that you have the right permissions to write to ${targetPath}.`,
                }, error);
            }
            else {
                throw error;
            }
        }
        return {
            filesWritten: [path.relative(process.cwd(), targetPath)],
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ193cml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ193cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBR0wsa0JBQWtCLEdBR25CLE1BQU0seUNBQXlDLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFZOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBS1Y7SUFDQTtJQUNBO0lBQ0E7SUFQbkI7O09BRUc7SUFDSCxZQUNtQixZQUFzQyxFQUN0QyxZQUFzQyxFQUN0QyxTQUFnQyxFQUNoQyxNQUFNLElBQUk7UUFIVixpQkFBWSxHQUFaLFlBQVksQ0FBMEI7UUFDdEMsaUJBQVksR0FBWixZQUFZLENBQTBCO1FBQ3RDLGNBQVMsR0FBVCxTQUFTLENBQXVCO1FBQ2hDLFFBQUcsR0FBSCxHQUFHLENBQU87SUFDMUIsQ0FBQztJQUNKOztPQUVHO0lBQ0gsaUJBQWlCLEdBQUcsS0FBSyxFQUN2QixZQUEwQixFQUMxQixPQUE0QixFQUM1QixNQUFlLEVBQ2YsU0FBNkIsa0JBQWtCLENBQUMsSUFBSSxFQUNULEVBQUU7UUFDN0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUMxQixNQUFNLEVBQ04sTUFBTSxDQUNQLENBQUM7UUFDRixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFaEUsSUFBSTtZQUNGLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ25EO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLEtBQUssR0FBRyxHQUFZLENBQUM7WUFDM0IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDcEMsTUFBTSxJQUFJLGdCQUFnQixDQUN4QixrQkFBa0IsRUFDbEI7b0JBQ0UsT0FBTyxFQUFFLDBEQUEwRCxVQUFVLEVBQUU7b0JBQy9FLFVBQVUsRUFBRSwwREFBMEQsVUFBVSxHQUFHO2lCQUNwRixFQUNELEtBQUssQ0FDTixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsTUFBTSxLQUFLLENBQUM7YUFDYjtTQUNGO1FBRUQsT0FBTztZQUNMLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3pELENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZnNwIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtcbiAgQ2xpZW50Q29uZmlnLFxuICBDbGllbnRDb25maWdGaWxlQmFzZU5hbWUsXG4gIENsaWVudENvbmZpZ0Zvcm1hdCxcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgR2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGVSZXN1bHQsXG59IGZyb20gJy4uL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGb3JtYXR0ZXIgfSBmcm9tICcuL2NsaWVudF9jb25maWdfZm9ybWF0dGVyLmpzJztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbmV4cG9ydCB0eXBlIENsaWVudENvbmZpZ1BhdGhSZXNvbHZlciA9IChcbiAgZmlsZU5hbWU6IENsaWVudENvbmZpZ0ZpbGVCYXNlTmFtZSxcbiAgb3V0RGlyPzogc3RyaW5nLFxuICBmb3JtYXQ/OiBDbGllbnRDb25maWdGb3JtYXRcbikgPT4gUHJvbWlzZTxzdHJpbmc+O1xuXG5leHBvcnQgdHlwZSBDbGllbnRDb25maWdOYW1lUmVzb2x2ZXIgPSAoXG4gIHZlcnNpb246IENsaWVudENvbmZpZ1ZlcnNpb25cbikgPT4gQ2xpZW50Q29uZmlnRmlsZUJhc2VOYW1lO1xuXG4vKipcbiAqIEEgY2xhc3MgdGhhdCBwZXJzaXN0cyBjbGllbnQgY29uZmlnIHRvIGRpc2suXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRDb25maWdXcml0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBjbGllbnQgY29uZmlnIHdyaXRlclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXRoUmVzb2x2ZXI6IENsaWVudENvbmZpZ1BhdGhSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5hbWVSZXNvbHZlcjogQ2xpZW50Q29uZmlnTmFtZVJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZm9ybWF0dGVyOiBDbGllbnRDb25maWdGb3JtYXR0ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmc3AgPSBfZnNwXG4gICkge31cbiAgLyoqXG4gICAqIFBlcnNpc3RzIHByb3ZpZGVkIGNsaWVudCBjb25maWcgYXMganNvbiBmaWxlIHRvIHRhcmdldCBwYXRoLlxuICAgKi9cbiAgd3JpdGVDbGllbnRDb25maWcgPSBhc3luYyAoXG4gICAgY2xpZW50Q29uZmlnOiBDbGllbnRDb25maWcsXG4gICAgdmVyc2lvbjogQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgICBvdXREaXI/OiBzdHJpbmcsXG4gICAgZm9ybWF0OiBDbGllbnRDb25maWdGb3JtYXQgPSBDbGllbnRDb25maWdGb3JtYXQuSlNPTlxuICApOiBQcm9taXNlPEdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlUmVzdWx0PiA9PiB7XG4gICAgY29uc3QgdGFyZ2V0UGF0aCA9IGF3YWl0IHRoaXMucGF0aFJlc29sdmVyKFxuICAgICAgdGhpcy5uYW1lUmVzb2x2ZXIodmVyc2lvbiksXG4gICAgICBvdXREaXIsXG4gICAgICBmb3JtYXRcbiAgICApO1xuICAgIGNvbnN0IGZpbGVDb250ZW50ID0gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGNsaWVudENvbmZpZywgZm9ybWF0KTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmZzcC53cml0ZUZpbGUodGFyZ2V0UGF0aCwgZmlsZUNvbnRlbnQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgZXJyb3IgPSBlcnIgYXMgRXJyb3I7XG4gICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnRUFDQ0VTJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgJ1Blcm1pc3Npb25zRXJyb3InLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBZb3UgZG8gbm90IGhhdmUgdGhlIHBlcm1pc3Npb25zIHRvIHdyaXRlIHRvIHRoaXMgZmlsZTogJHt0YXJnZXRQYXRofWAsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBgRW5zdXJlIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IHBlcm1pc3Npb25zIHRvIHdyaXRlIHRvICR7dGFyZ2V0UGF0aH0uYCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZmlsZXNXcml0dGVuOiBbcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCB0YXJnZXRQYXRoKV0sXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==