/**
 * Reads SSM environment context from a known Amplify environment variable,
 * fetches values from SSM and places those values in the corresponding environment variables
 */
export const internalAmplifyFunctionResolveSsmParams = async (client) => {
    const envPathObject = JSON.parse(process.env.AMPLIFY_SSM_ENV_CONFIG ?? '{}');
    const paths = Object.keys(envPathObject);
    if (paths.length === 0) {
        return;
    }
    let actualSsmClient;
    if (client) {
        actualSsmClient = client;
    }
    else {
        const ssmSdk = await import('@aws-sdk/client-ssm');
        actualSsmClient = new ssmSdk.SSM();
    }
    const chunkArray = (array, chunkSize) => {
        const chunks = [];
        for (let i = 0; i < array.length; i += chunkSize) {
            chunks.push(array.slice(i, i + chunkSize));
        }
        return chunks;
    };
    const resolveSecrets = async (paths) => {
        const response = (await Promise.all(chunkArray(paths, 10).map(async (chunkedPaths) => await actualSsmClient.getParameters({
            Names: chunkedPaths,
            WithDecryption: true,
        })))).reduce((accumulator, res) => {
            accumulator.Parameters?.push(...(res.Parameters ?? []));
            accumulator.InvalidParameters?.push(...(res.InvalidParameters ?? []));
            return accumulator;
        }, {
            Parameters: [],
            InvalidParameters: [],
        });
        if (response.Parameters && response.Parameters.length > 0) {
            for (const parameter of response.Parameters) {
                if (parameter.Name) {
                    const envKey = Object.keys(envPathObject).find((key) => envPathObject[key].sharedPath === parameter.Name);
                    const envName = envKey
                        ? envPathObject[envKey].name
                        : envPathObject[parameter.Name]?.name;
                    process.env[envName] = parameter.Value;
                }
            }
        }
        return response;
    };
    const response = await resolveSecrets(paths);
    const sharedPaths = (response?.InvalidParameters || [])
        .map((invalidParam) => envPathObject[invalidParam].sharedPath)
        .filter((sharedParam) => !!sharedParam); // this assertion is safe because we are filtering out undefined
    if (sharedPaths.length > 0) {
        await resolveSecrets(sharedPaths);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zc21fcGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xhbWJkYS1zaGltcy9yZXNvbHZlX3NzbV9wYXJhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0E7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQUcsS0FBSyxFQUFFLE1BQVksRUFBRSxFQUFFO0lBQzVFLE1BQU0sYUFBYSxHQUFlLElBQUksQ0FBQyxLQUFLLENBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLElBQUksSUFBSSxDQUMzQyxDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUV6QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLE9BQU87S0FDUjtJQUVELElBQUksZUFBb0IsQ0FBQztJQUN6QixJQUFJLE1BQU0sRUFBRTtRQUNWLGVBQWUsR0FBRyxNQUFNLENBQUM7S0FDMUI7U0FBTTtRQUNMLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDbkQsZUFBZSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBSSxLQUFVLEVBQUUsU0FBaUIsRUFBUyxFQUFFO1FBQzdELE1BQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztRQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksU0FBUyxFQUFFO1lBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLEVBQUU7UUFDL0MsTUFBTSxRQUFRLEdBQUcsQ0FDZixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQ3ZCLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUNyQixNQUFNLGVBQWUsQ0FBQyxhQUFhLENBQUM7WUFDbEMsS0FBSyxFQUFFLFlBQVk7WUFDbkIsY0FBYyxFQUFFLElBQUk7U0FDckIsQ0FBQyxDQUNMLENBQ0YsQ0FDRixDQUFDLE1BQU0sQ0FDTixDQUFDLFdBQVcsRUFBRSxHQUErQixFQUFFLEVBQUU7WUFDL0MsV0FBVyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4RCxXQUFXLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0RSxPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDLEVBQ0Q7WUFDRSxVQUFVLEVBQUUsRUFBRTtZQUNkLGlCQUFpQixFQUFFLEVBQUU7U0FDaUIsQ0FDekMsQ0FBQztRQUVGLElBQUksUUFBUSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekQsS0FBSyxNQUFNLFNBQVMsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFO2dCQUMzQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUU7b0JBQ2xCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUM1QyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUMxRCxDQUFDO29CQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU07d0JBQ3BCLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSTt3QkFDNUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDO29CQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7aUJBQ3hDO2FBQ0Y7U0FDRjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdDLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFLGlCQUFpQixJQUFJLEVBQUUsQ0FBQztTQUNwRCxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLENBQUM7U0FDN0QsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFhLENBQUMsQ0FBQyxnRUFBZ0U7SUFFdkgsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUMxQixNQUFNLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBjb2RlIGxvYWRzIGVudmlyb25tZW50IHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRoZW0gaW4gdGhlaXIgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBJZiB0aGVyZSBhcmUgbm8gU1NNIGVudmlyb25tZW50IHZhbHVlcyBmb3IgdGhpcyBmdW5jdGlvbiwgdGhpcyBpcyBhIG5vb3AuXG4gKi9cbmltcG9ydCB0eXBlIHsgR2V0UGFyYW1ldGVyc0NvbW1hbmRPdXRwdXQsIFNTTSB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zc20nO1xuaW1wb3J0IHR5cGUgeyBTc21FbnZWYXJzIH0gZnJvbSAnLi4vZnVuY3Rpb25fZW52X3RyYW5zbGF0b3IuanMnO1xuXG4vKipcbiAqIFJlYWRzIFNTTSBlbnZpcm9ubWVudCBjb250ZXh0IGZyb20gYSBrbm93biBBbXBsaWZ5IGVudmlyb25tZW50IHZhcmlhYmxlLFxuICogZmV0Y2hlcyB2YWx1ZXMgZnJvbSBTU00gYW5kIHBsYWNlcyB0aG9zZSB2YWx1ZXMgaW4gdGhlIGNvcnJlc3BvbmRpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKi9cbmV4cG9ydCBjb25zdCBpbnRlcm5hbEFtcGxpZnlGdW5jdGlvblJlc29sdmVTc21QYXJhbXMgPSBhc3luYyAoY2xpZW50PzogU1NNKSA9PiB7XG4gIGNvbnN0IGVudlBhdGhPYmplY3Q6IFNzbUVudlZhcnMgPSBKU09OLnBhcnNlKFxuICAgIHByb2Nlc3MuZW52LkFNUExJRllfU1NNX0VOVl9DT05GSUcgPz8gJ3t9J1xuICApO1xuICBjb25zdCBwYXRocyA9IE9iamVjdC5rZXlzKGVudlBhdGhPYmplY3QpO1xuXG4gIGlmIChwYXRocy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgYWN0dWFsU3NtQ2xpZW50OiBTU007XG4gIGlmIChjbGllbnQpIHtcbiAgICBhY3R1YWxTc21DbGllbnQgPSBjbGllbnQ7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3NtU2RrID0gYXdhaXQgaW1wb3J0KCdAYXdzLXNkay9jbGllbnQtc3NtJyk7XG4gICAgYWN0dWFsU3NtQ2xpZW50ID0gbmV3IHNzbVNkay5TU00oKTtcbiAgfVxuXG4gIGNvbnN0IGNodW5rQXJyYXkgPSA8VD4oYXJyYXk6IFRbXSwgY2h1bmtTaXplOiBudW1iZXIpOiBUW11bXSA9PiB7XG4gICAgY29uc3QgY2h1bmtzOiBUW11bXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IGNodW5rU2l6ZSkge1xuICAgICAgY2h1bmtzLnB1c2goYXJyYXkuc2xpY2UoaSwgaSArIGNodW5rU2l6ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gY2h1bmtzO1xuICB9O1xuXG4gIGNvbnN0IHJlc29sdmVTZWNyZXRzID0gYXN5bmMgKHBhdGhzOiBzdHJpbmdbXSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKFxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIGNodW5rQXJyYXkocGF0aHMsIDEwKS5tYXAoXG4gICAgICAgICAgYXN5bmMgKGNodW5rZWRQYXRocykgPT5cbiAgICAgICAgICAgIGF3YWl0IGFjdHVhbFNzbUNsaWVudC5nZXRQYXJhbWV0ZXJzKHtcbiAgICAgICAgICAgICAgTmFtZXM6IGNodW5rZWRQYXRocyxcbiAgICAgICAgICAgICAgV2l0aERlY3J5cHRpb246IHRydWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKS5yZWR1Y2UoXG4gICAgICAoYWNjdW11bGF0b3IsIHJlczogR2V0UGFyYW1ldGVyc0NvbW1hbmRPdXRwdXQpID0+IHtcbiAgICAgICAgYWNjdW11bGF0b3IuUGFyYW1ldGVycz8ucHVzaCguLi4ocmVzLlBhcmFtZXRlcnMgPz8gW10pKTtcbiAgICAgICAgYWNjdW11bGF0b3IuSW52YWxpZFBhcmFtZXRlcnM/LnB1c2goLi4uKHJlcy5JbnZhbGlkUGFyYW1ldGVycyA/PyBbXSkpO1xuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBQYXJhbWV0ZXJzOiBbXSxcbiAgICAgICAgSW52YWxpZFBhcmFtZXRlcnM6IFtdLFxuICAgICAgfSBhcyBQYXJ0aWFsPEdldFBhcmFtZXRlcnNDb21tYW5kT3V0cHV0PlxuICAgICk7XG5cbiAgICBpZiAocmVzcG9uc2UuUGFyYW1ldGVycyAmJiByZXNwb25zZS5QYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoY29uc3QgcGFyYW1ldGVyIG9mIHJlc3BvbnNlLlBhcmFtZXRlcnMpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlci5OYW1lKSB7XG4gICAgICAgICAgY29uc3QgZW52S2V5ID0gT2JqZWN0LmtleXMoZW52UGF0aE9iamVjdCkuZmluZChcbiAgICAgICAgICAgIChrZXkpID0+IGVudlBhdGhPYmplY3Rba2V5XS5zaGFyZWRQYXRoID09PSBwYXJhbWV0ZXIuTmFtZVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgZW52TmFtZSA9IGVudktleVxuICAgICAgICAgICAgPyBlbnZQYXRoT2JqZWN0W2VudktleV0ubmFtZVxuICAgICAgICAgICAgOiBlbnZQYXRoT2JqZWN0W3BhcmFtZXRlci5OYW1lXT8ubmFtZTtcbiAgICAgICAgICBwcm9jZXNzLmVudltlbnZOYW1lXSA9IHBhcmFtZXRlci5WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfTtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc29sdmVTZWNyZXRzKHBhdGhzKTtcblxuICBjb25zdCBzaGFyZWRQYXRocyA9IChyZXNwb25zZT8uSW52YWxpZFBhcmFtZXRlcnMgfHwgW10pXG4gICAgLm1hcCgoaW52YWxpZFBhcmFtKSA9PiBlbnZQYXRoT2JqZWN0W2ludmFsaWRQYXJhbV0uc2hhcmVkUGF0aClcbiAgICAuZmlsdGVyKChzaGFyZWRQYXJhbSkgPT4gISFzaGFyZWRQYXJhbSkgYXMgc3RyaW5nW107IC8vIHRoaXMgYXNzZXJ0aW9uIGlzIHNhZmUgYmVjYXVzZSB3ZSBhcmUgZmlsdGVyaW5nIG91dCB1bmRlZmluZWRcblxuICBpZiAoc2hhcmVkUGF0aHMubGVuZ3RoID4gMCkge1xuICAgIGF3YWl0IHJlc29sdmVTZWNyZXRzKHNoYXJlZFBhdGhzKTtcbiAgfVxufTtcbiJdfQ==